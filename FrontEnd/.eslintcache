[{"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\index.js":"1","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\MetroApp.js":"2","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AppRouter.js":"3","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\DashboardRouter.js":"4","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\CreateUserScreen.js":"5","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\LoginScreen.js":"6","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\NavbarAdmin.js":"7","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\Navbar.js":"8","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\articles\\HomeArticlesScreen.js":"9","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\buy\\BuyScreen.js":"10","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\hooks\\useCounter.js":"11","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\hooks\\useForm.js":"12","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\firebase\\firebase-config.js":"13","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\authReducer.js":"14","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\types\\types.js":"15","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\AuthContext.js":"16","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\clientAuth.js":"17","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AdminRouter.js":"18","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PrivateRoute.js":"19","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PublicRoute.js":"20","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AdministratorRoute.js":"21","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminClient\\AdminClientScreen.js":"22","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminClient\\FormClient.js":"23","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\LoginAdminScreen.js":"24","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PrivateAdminRoute.js":"25","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PublicAdminRoute.js":"26","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\buy\\ProductScreen.js":"27","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\category\\CategoryScreen.js":"28","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\Sidebar.js":"29","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\NewProduct.js":"30","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\AdminCategoryScreen.js":"31","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\FormProduct.js":"32","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\articles\\services.js":"33"},{"size":197,"mtime":1613963602879,"results":"34","hashOfConfig":"35"},{"size":648,"mtime":1619457040337,"results":"36","hashOfConfig":"35"},{"size":2627,"mtime":1619899827958,"results":"37","hashOfConfig":"35"},{"size":983,"mtime":1619469104462,"results":"38","hashOfConfig":"35"},{"size":5414,"mtime":1619901137762,"results":"39","hashOfConfig":"35"},{"size":2118,"mtime":1619901312294,"results":"40","hashOfConfig":"35"},{"size":1247,"mtime":1619901452375,"results":"41","hashOfConfig":"35"},{"size":3677,"mtime":1619901470280,"results":"42","hashOfConfig":"35"},{"size":4224,"mtime":1619909426257,"results":"43","hashOfConfig":"35"},{"size":3338,"mtime":1619901042402,"results":"44","hashOfConfig":"35"},{"size":473,"mtime":1611958713651,"results":"45","hashOfConfig":"35"},{"size":531,"mtime":1619975267105,"results":"46","hashOfConfig":"35"},{"size":655,"mtime":1612481800228,"results":"47","hashOfConfig":"35"},{"size":405,"mtime":1619899069582,"results":"48","hashOfConfig":"35"},{"size":82,"mtime":1613967287728,"results":"49","hashOfConfig":"35"},{"size":86,"mtime":1612555748916,"results":"50","hashOfConfig":"35"},{"size":586,"mtime":1619901198652,"results":"51","hashOfConfig":"35"},{"size":1607,"mtime":1619906497117,"results":"52","hashOfConfig":"35"},{"size":574,"mtime":1619901615946,"results":"53","hashOfConfig":"35"},{"size":567,"mtime":1619901634326,"results":"54","hashOfConfig":"35"},{"size":613,"mtime":1613151803759,"results":"55","hashOfConfig":"35"},{"size":2847,"mtime":1619900951472,"results":"56","hashOfConfig":"35"},{"size":4926,"mtime":1619900986876,"results":"57","hashOfConfig":"35"},{"size":1916,"mtime":1619901409388,"results":"58","hashOfConfig":"35"},{"size":590,"mtime":1619901608356,"results":"59","hashOfConfig":"35"},{"size":593,"mtime":1614479333158,"results":"60","hashOfConfig":"35"},{"size":4700,"mtime":1619901076883,"results":"61","hashOfConfig":"35"},{"size":4186,"mtime":1619836337751,"results":"62","hashOfConfig":"35"},{"size":1225,"mtime":1619901507977,"results":"63","hashOfConfig":"35"},{"size":9191,"mtime":1619975255692,"results":"64","hashOfConfig":"35"},{"size":3936,"mtime":1619974604131,"results":"65","hashOfConfig":"35"},{"size":7000,"mtime":1619975807346,"results":"66","hashOfConfig":"35"},{"size":1097,"mtime":1619909082140,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"hpuued",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\index.js",[],["147","148"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\MetroApp.js",["149"],"import React, { useEffect, useReducer} from 'react';\r\nimport { AuthContext } from './auth/AuthContext';\r\nimport { authReducer } from './auth/authReducer';\r\nimport { AppRouter } from './routers/AppRouter';\r\n\r\nconst init = () => {\r\n    return JSON.parse(localStorage.getItem('user')) || { logged: false };\r\n}\r\n\r\nexport const MetroApp = () => {\r\n\r\n    const [user, dispatch] = useReducer(authReducer, {}, init)\r\n    useEffect(() => {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n    }, [])\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, dispatch }}>\r\n            <AppRouter />\r\n        </AuthContext.Provider>\r\n    )\r\n}","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AppRouter.js",["150"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n} from \"react-router-dom\";\r\n\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport { PublicRoute } from \"./PublicRoute\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\n\r\nimport { LoginScreen } from \"../components/login/LoginScreen\";\r\nimport { CreateUserScreen } from \"../components/login/CreateUserScreen\";\r\nimport { DashboardRouter } from \"./DashboardRouter\";\r\nimport { firebase } from '../firebase/firebase-config';\r\nimport { AdminRouter } from \"./AdminRouter\";\r\nimport '../styles/login.css';\r\nimport { types } from \"../types/types\";\r\nimport { LoginAdminScreen } from \"../components/login/LoginAdminScreen\";\r\n\r\nimport { PrivateAdminRoute } from \"./PrivateAdminRoute\";\r\nimport { PublicAdminRoute } from \"./PublicAdminRoute\";\r\n\r\n\r\nexport const AppRouter = () => {\r\n    const { user, dispatch } = useContext(AuthContext);\r\n    const userLogged = JSON.parse(localStorage.getItem('uid'));\r\n\r\n    const [client, setClient] = useState([]);\r\n    useEffect(() => {\r\n        getClients();\r\n    }, []);\r\n\r\n    const getClients = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client`);\r\n        const body = await resp.json();\r\n        const { clients } = body;\r\n        setClient(clients);\r\n    };\r\n\r\n    let admin = client.map((admin) => {\r\n        if (admin.isAdmin) {\r\n            return (admin.uid)\r\n        }\r\n    })\r\n    let [uid] = admin;\r\n    const isAdmin = userLogged === uid ? true : false;\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((user) => {\r\n            if (user?.uid) {\r\n                dispatch({\r\n                    type: types.login,\r\n                    payload: {\r\n                        name: user.displayName,\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <PublicRoute exact path=\"/login\" component={LoginScreen} isAuthenticated={user.logged && !isAdmin} />\r\n                <PublicRoute exact path=\"/create-user\" component={CreateUserScreen} isAuthenticated={user.logged && !isAdmin} />\r\n\r\n                <PublicAdminRoute exact path=\"/admin/login\" component={LoginAdminScreen} isAuthenticated={user.logged && isAdmin} />\r\n                <PrivateAdminRoute path=\"/admin\" component={AdminRouter} isAuthenticated={user.logged && isAdmin} />\r\n\r\n                <PrivateRoute path=\"/\" component={DashboardRouter} isAuthenticated={user.logged && !isAdmin} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\DashboardRouter.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\CreateUserScreen.js",["151"],"import React, { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from '../hooks/useForm';\r\nimport Swal from 'sweetalert2';\r\nimport { firebase } from '../../firebase/firebase-config';\r\nimport { types } from '../../types/types';\r\nimport { AuthContext } from '../../auth/AuthContext';\r\n\r\nexport const CreateUserScreen = () => {\r\n    const { dispatch } = useContext(AuthContext);\r\n\r\n    const [values, handleInputChange,] = useForm({\r\n        name: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        uid: '',\r\n    });\r\n\r\n    var { email, password, name, lastName, uid } = values;\r\n\r\n    const formValid = () => {\r\n        if (name.trim().length === 0) {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'You must enter a name',\r\n                icon: 'error',\r\n                message: 'error',\r\n                confirmButtonText: 'Ok'\r\n            })\r\n            return false;\r\n        } else if (lastName.trim().length === 0) {\r\n            Swal.fire({\r\n                title: 'Error!',\r\n                text: 'You must enter a Last Name',\r\n                icon: 'error',\r\n                message: 'error',\r\n                confirmButtonText: 'Ok'\r\n            })\r\n            return false;\r\n        }\r\n        dispatch({\r\n            type: types.login,\r\n            payload: {\r\n                accion: 'registro'\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (formValid()) {\r\n            firebase.auth().createUserWithEmailAndPassword(email, password)\r\n                .then(async ({ user }) => {\r\n                    localStorage.setItem('uid', JSON.stringify(user.uid));\r\n                    await user.updateProfile({ displayName: name });\r\n                    addClient();\r\n                })\r\n                .catch(e => {\r\n                    Swal.fire('Error', e.message, 'error');\r\n                })\r\n        };\r\n    }\r\n\r\n    const addClient = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                uid: JSON.parse(localStorage.getItem('uid')),\r\n                name,\r\n                lastName,\r\n                password,\r\n                email\r\n            }),\r\n        });\r\n        const body = await resp.json();\r\n        localStorage.setItem('id', JSON.stringify(body._id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-wrap mt-3\">\r\n            <div className=\"login-html\">\r\n                <label htmlFor=\"tab-2\" className=\"tab\">Sign Up</label>\r\n                <form onSubmit={handleSubmit} className=\"login-form\">\r\n                    <div className=\"sign-up-html\">\r\n                        <div className=\"group\">\r\n                            <label htmlFor=\"user\" className=\"label\">Name</label>\r\n                            <input\r\n                                id=\"user\"\r\n                                name=\"name\"\r\n                                type=\"text\"\r\n                                className=\"input\"\r\n                                value={name}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"group\">\r\n                            <label htmlFor=\"pass\" className=\"label\">Last Name</label>\r\n                            <input\r\n                                id=\"pass\"\r\n                                name=\"lastName\"\r\n                                type=\"text\"\r\n                                className=\"input\"\r\n                                value={lastName}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"group\">\r\n                            <label htmlFor=\"pass\" className=\"label\">Email Address</label>\r\n                            <input\r\n                                id=\"pass\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                className=\"input\"\r\n                                value={email}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"group\">\r\n                            <label htmlFor=\"pass\" className=\"label\">Password</label>\r\n                            <input\r\n                                id=\"pass\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                className=\"input\"\r\n                                value={password}\r\n                                onChange={handleInputChange} />\r\n                        </div>\r\n                        <div className=\"group\">\r\n                            <input\r\n                                type=\"submit\"\r\n                                className=\"button\"\r\n                                value=\"Sign Up\" />\r\n                        </div>\r\n                        <div className=\"foot-lnk\">\r\n                            <Link to=\"/Login\">Back</Link>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\LoginScreen.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\NavbarAdmin.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\Navbar.js",["152","153"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../auth/AuthContext';\r\nimport { LogOutUser } from '../../auth/clientAuth';\r\nimport { types } from '../../types/types';\r\n\r\nexport const Navbar = () => {\r\n    const { dispatch } = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    const id = JSON.parse(localStorage.getItem('uid'));\r\n\r\n    const getClient = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/${id}`);\r\n        const body = await resp.json();\r\n        let { client } = body;\r\n        setBody(client);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getClient();\r\n    }, []);\r\n\r\n    const [body, setBody] = useState({});\r\n\r\n    const [category, setCategory] = useState([]);\r\n\r\n    const handleLogout = () => {\r\n        history.replace('/login');\r\n        LogOutUser();\r\n        dispatch({\r\n            type: types.logout\r\n        });\r\n    }\r\n\r\n    const getCategory = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/category`);\r\n        const body = await resp.json();\r\n        setCategory(body);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategory();\r\n    }, []);\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary navbar mt-2\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"navbar-brand\">\r\n                    <img src={'/assets/img/1.png'} style={{ width: 70, marginTop: -7 }} alt=\"MetroShop\" />\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                    <div className=\"navbar-nav\">\r\n                        <Link to=\"/\" className=\"nav-link active\" aria-current=\"page\">\r\n                            <h4>\r\n                                Home\r\n                            </h4>\r\n                        </Link>\r\n                        {\r\n                            category.map((item) => {\r\n                                return (\r\n                                    <div key={item._id}>\r\n                                        <h4>\r\n                                            <Link to={`/CategoryScreen/${item._id}`} className=\"nav-link\" key={item._id} >\r\n                                                {item.name}\r\n                                            </Link>\r\n                                        </h4>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-end w-100\">\r\n                        <ul className=\"navbar-nav\">\r\n                            <li\r\n                                className=\"nav-item nav-link btn\"\r\n                            >\r\n                                {/* Welcome {name} */}\r\n                            </li>\r\n                            <button\r\n                                className=\"nav-item nav-link btn\"\r\n                                onClick={handleLogout}\r\n                            >\r\n                                LogOut\r\n                            </button>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\articles\\HomeArticlesScreen.js",["154","155","156"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getCategories, getProducts, buy } from './services';\r\n\r\nexport const HomeArticlesScreen = () => {\r\n\r\n    const [products, setProducts] = useState([]);\r\n    const [categories, setCategories] = useState([]);\r\n    let productsFront = products.map(item => {\r\n        return {\r\n            ...item,\r\n            productId: item._id\r\n        };\r\n    });\r\n\r\n    const getCategoriesList = async () => {\r\n        const resp = await getCategories();\r\n        const body = await resp.json();\r\n        setCategories(body);\r\n    }\r\n    const getProductsList = async () => {\r\n        const resp = await getProducts();\r\n        const body = await resp.json();\r\n        setProducts(body.products);\r\n    }\r\n\r\n    const buyProduct = async (product) => {\r\n        const resp = await buy(product);\r\n        const data = await resp.json();\r\n        getProductsList();\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCategoriesList();\r\n        getProductsList();\r\n    }, [])\r\n\r\n    const getState = (state) => {\r\n        if (state) {\r\n            return (\r\n                <button className=\"btn btn-success btn-block\" >\r\n                    Buy\r\n                </button>\r\n            )\r\n        } else {\r\n            return (\r\n                <button className=\"btn btn-secondary btn-block\" disabled>\r\n                    Spent\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"carousel slide\" data-bs-ride=\"carousel\">\r\n                <div className=\"carousel-inner\">\r\n                    <div className=\"carousel-item active\">\r\n                        <img src={'./assets/img/1.jpg'} className=\"d-block w-100 img-fluid\" alt=\"...\" />\r\n                    </div>\r\n                    <div className=\"carousel-item\">\r\n                        <img src={'./assets/img/4.jpg'} className=\"d-block w-100 img-fluid\" alt=\"...\" />\r\n                    </div>\r\n                    <div className=\"carousel-item\">\r\n                        <img src={'./assets/img/5.jpg'} className=\"d-block w-100 img-fluid\" alt=\"...\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Link to=\"/ProductScreen\" className=\"btn btn-dark m-3\" >My Product</Link>\r\n            <div className=\"container mt-4\">\r\n                <div className=\"row justify-content-md-center\">\r\n                    {\r\n                        productsFront.map((item) => {\r\n                            return (\r\n                                <div key={item.productId} className=\"col-md-3 m-1 text-dark\" >\r\n                                    <div className=\"col home-area m-1\">\r\n                                        <div className=\"card\">\r\n                                            <div className=\"card-body\">\r\n                                                <h4 className=\"card-title\"><kbd>{item.name}</kbd></h4>\r\n                                                <img src={item.urlImg} width=\"400px\" className=\"img-fluid\" />\r\n                                                <hr />\r\n                                                <h6 className=\"card-subtitle mb-2 font-weight-bold text-danger\"><font size=\"4\" color=\"red\">P</font><font size=\"3\"></font><font size=\"4\">rice: </font><mark>$ {item.price}</mark></h6>\r\n                                                <p className=\"card-text mb-2\"><font size=\"3\" color=\"Navy\">Description:</font> {item.description}</p>\r\n                                                <h6 className=\"card-text\" ><strong>Category: </strong><em>{item.category}</em></h6>\r\n                                                <Link to={`/BuyScreen/${item.productId}`} className=\"btn btn-link btn-block\">More Info</Link>\r\n                                                <div onClick={() => buyProduct(item)}>{getState(item.spent)}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\buy\\BuyScreen.js",["157","158","159","160","161"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const BuyScreen = () => {\r\n    let { id } = useParams();\r\n    const uid = JSON.parse(localStorage.getItem('uid'));\r\n\r\n    const getProduct = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/product/${id}`);\r\n        const body = await resp.json();\r\n        setProduct({\r\n            ...body,\r\n            productId: body._id\r\n        });\r\n    }\r\n\r\n    const [product, setProduct] = useState({});\r\n    let { _id, description, name, price, quantityInStock, spent, urlImg, category } = product;\r\n\r\n    useEffect(() => {\r\n        getProduct();\r\n    }, [() => buy()]);\r\n\r\n    const buy = async (product) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'success',\r\n            title: 'Purchased product',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n        });\r\n        const resp = await fetch(`http://localhost:4000/api/client/${uid}/products`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(product),\r\n        });\r\n        const data = await resp.json();\r\n    }\r\n\r\n    const getState = (state) => {\r\n        if (state) {\r\n            return (\r\n                <button className=\"btn btn-success btn-block\" >\r\n                    Buy\r\n                </button>\r\n            )\r\n        } else {\r\n            return (\r\n                <button className=\"btn btn-secondary btn-block\" disabled>\r\n                    Spent\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"card mt-3\">\r\n                    <div className=\"row g-0\">\r\n                        <div className=\"col-md-7\">\r\n                            <img src={urlImg} className=\"img-fluid\" />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"card-body\">\r\n                                <h4 className=\"card-title\"><kbd>{name}</kbd></h4>\r\n                                <h5 className=\"card-subtitle mb-2 font-weight-bold text-danger mt-2\"><font size=\"4\" color=\"red\">P</font><font size=\"4\">rice: </font><mark>$ {price}</mark></h5>\r\n                                <p className=\"card-subtitle mt-2\"><font size=\"3\" color=\"black\">Category: <em>{category}</em></font></p>\r\n                                <p className=\"card-text mt-2\"><font size=\"3\" color=\"black\">Description:</font><font size=\"3\" color=\"gray\">{description}</font></p>\r\n                                <h5><font size=\"3\" color=\"black\"> Quantity In Stock </font></h5>\r\n                                <p className=\"card-text\"><font size=\"4\" color=\"red\"><em>{quantityInStock}</em></font></p>\r\n                                <hr />\r\n                            </div>\r\n                            <div onClick={() => buy(product)}>{getState(spent)}</div>\r\n                            <Link to=\"/\" type=\"button\" className=\"btn btn-danger btn-sm btn-block mt-2\">Back</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\hooks\\useCounter.js",[],["162","163"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\hooks\\useForm.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\firebase\\firebase-config.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\authReducer.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\types\\types.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\AuthContext.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\auth\\clientAuth.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AdminRouter.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PrivateRoute.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PublicRoute.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\AdministratorRoute.js",[],["164","165"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminClient\\AdminClientScreen.js",["166","167"],"import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Swal from 'sweetalert2'\r\n\r\nexport const AdminClientScreen = () => {\r\n    const [client, setClient] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getClients();\r\n    }, []);\r\n\r\n    const getClients = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client`);\r\n        const body = await resp.json();\r\n        let { clients } = body;\r\n        setClient(clients);\r\n    }\r\n\r\n    const [buy] = client;\r\n\r\n    const deleteClient = async (id) => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/${id}`, {\r\n            method: 'DELETE'\r\n        });\r\n        const body = await resp.json();\r\n        console.log(body);\r\n\r\n        if (body.ok) {\r\n            getClients();\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Delete',\r\n                text: 'Deleted customer!'\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-3\">\r\n            <div className=\"row\" >\r\n                <div className=\"col-lg-12 col-md-12\" >\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr className=\"table-warning\">\r\n                                <th scope=\"col\">Id</th>\r\n                                <th scope=\"col\">Name</th>\r\n                                <th scope=\"col\">Last Name</th>\r\n                                <th scope=\"col\">Email</th>\r\n                                <th scope=\"col\">Buys</th>\r\n                                <th scope=\"col\">Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                client.map((item, i) => {\r\n                                    return (\r\n                                        <tr key={item._id}>\r\n                                            <th scope=\"row\">{i + 1}</th>\r\n                                            <td>{item.name}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.email}</td>\r\n                                            <td>{item.buy.length}</td>\r\n                                            <td>\r\n                                                <button onClick={() => deleteClient(item._id)} className=\"btn btn-outline-danger btn-sm btn-block\">Delete</button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminClient\\FormClient.js",["168","169"],"import React, { useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { useForm } from '../hooks/useForm';\r\n\r\nexport const FormClient = () => {\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        editClient();\r\n        reset();\r\n    }\r\n\r\n    const { id } = useParams();\r\n\r\n    useEffect(() => {\r\n        getClient();\r\n    }, []);\r\n\r\n    const [values, handleInputChange, loadDataForm, reset] = useForm({\r\n        name: '',\r\n        lastName: '',\r\n        email: '',\r\n        password: '',\r\n        buy: ''\r\n\r\n    });\r\n    const { name, lastName, email, password, buy } = values;\r\n\r\n    const getClient = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/${id}`);\r\n        const body = await resp.json();\r\n        loadDataForm(body);\r\n    }\r\n    const editClient = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/edit/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: values.name,\r\n                lastName: values.lastName,\r\n                email: values.email,\r\n                password: values.password,\r\n                buy: values.buy\r\n            }),\r\n        });\r\n        const body = await resp.json();\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <div className=\"col col-lg-6 col-md-8 col-sm-11\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <fieldset>\r\n                            <legend>Edit a Client</legend>\r\n                            <div className=\"form-group\">\r\n                                <label>Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    className=\"form-control form-control-sm\"\r\n                                    placeholder=\"Name..\"\r\n                                    value={name}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Last Name</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"lastName\"\r\n                                    className=\"form-control form-control-sm\"\r\n                                    placeholder=\"Last Name..\"\r\n                                    value={lastName}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Email</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"email\"\r\n                                    className=\"form-control form-control-sm\"\r\n                                    placeholder=\"Email..\"\r\n                                    value={email}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Password</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"password\"\r\n                                    className=\"form-control form-control-sm\"\r\n                                    placeholder=\"Password..\"\r\n                                    value={password}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label>Compras</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"buy\"\r\n                                    className=\"form-control form-control-sm\"\r\n                                    placeholder=\"Vacio\"\r\n                                    value={buy}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-outline-info btn-sm\">Aceppt</button>\r\n                            <Link to=\"/admin/client\" type=\"button\" className=\"btn btn-outline-danger btn-sm\">Back</Link>\r\n                        </fieldset>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\login\\LoginAdminScreen.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PrivateAdminRoute.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\routers\\PublicAdminRoute.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\buy\\ProductScreen.js",["170","171","172","173"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const ProductScreen = ({ history }) => {\r\n    const uid = JSON.parse(localStorage.getItem('uid'));\r\n\r\n    const getProductClient = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/${JSON.parse(localStorage.getItem('uid'))}/products`);\r\n        const body = await resp.json();\r\n        let { buy } = body;\r\n        setProduct(buy);\r\n    }\r\n\r\n    const [products, setProduct] = useState([]);\r\n\r\n    let productsFront = products.map(item => {\r\n        return {\r\n            ...item,\r\n            counter: item.amount,\r\n            id: item._id\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProductClient();\r\n    }, [() => allFunction()]);\r\n\r\n    const deleteProduct = async (id) => {\r\n        const resp = await fetch(`http://localhost:4000/api/client/${uid}/products/${id}`, {\r\n            method: 'PUT'\r\n        });\r\n        const body = await resp.json();\r\n    }\r\n\r\n    const updateProduct = async (product, id) => {\r\n        const resp = await fetch(`http://localhost:4000/api/product/${id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(product),\r\n        });\r\n        const data = await resp.json();\r\n    }\r\n\r\n    const allFunction = (id, product) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'success',\r\n            title: 'Product Removed',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n        })\r\n        deleteProduct(id);\r\n        updateProduct(product, id);\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                productsFront.length > 0\r\n                    ?\r\n                    <div className=\"container\">\r\n                        <Link to=\"/\" type=\"button\" className=\"btn btn-danger btn-sm mt-2\">Back</Link>\r\n                        <div className=\"card mt-3\">\r\n                            {\r\n                                productsFront.map((item) => {\r\n                                    return (\r\n                                        <div className=\"row g-0\" key={item._id}>\r\n                                            <div className=\"col-md m-4\">\r\n                                                <img src={item.urlImg} width=\"400px\" className=\"img-fluid\" />\r\n                                            </div>\r\n                                            <div className=\"col-md-7 m-2\">\r\n                                                <div className=\"card-body\">\r\n                                                    <h4 className=\"card-title\"><kbd>{item.name}</kbd></h4>\r\n                                                    <hr />\r\n                                                    <h6 className=\"card-subtitle mb-2 font-weight-bold text-danger\"><font size=\"4\" color=\"red\">P</font><font size=\"3\"></font><font size=\"4\">rice: </font><mark>$ {item.price}</mark></h6>\r\n                                                    <p className=\"card-subtitle mb-2\"><font size=\"3\" color=\"Navy\">Description:</font> <font size=\"3\" color=\"black\">{item.description}</font></p>\r\n                                                    <h6><font size=\"3\" color=\"black\"> <strong>Category: </strong></font><em><font size=\"3\" color=\"black\">{item.category}</font></em></h6>\r\n                                                    <h5><font size=\"3\" color=\"black\"> Quantity In Stock </font><font size=\"4\" color=\"red\"><em>{item.quantityInStock}</em></font></h5>\r\n                                                    <p className=\"card-text\"><font size=\"3\" color=\"black\">Amount: {item.amount}</font></p>\r\n                                                    <hr />\r\n                                                </div>\r\n                                                <button onClick={() => allFunction(item._id, item)} className=\"btn btn-warning btn-sm btn-block\">Remover from my list</button>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"container\">\r\n                        <div className=\"card-center mt-3\">\r\n                        </div>\r\n                        <h3>You have no purchase</h3>\r\n                        <Link to=\"/\" type=\"button\" className=\"btn btn-outline-danger btn-sm\">Back</Link>\r\n                    </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\category\\CategoryScreen.js",["174","175","176","177"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport const CategoryScreen = ({ history }) => {\r\n    let { id } = useParams();\r\n    const uid = JSON.parse(localStorage.getItem('uid'));\r\n\r\n    useEffect(() => {\r\n        getCategories();\r\n    }, []);\r\n\r\n    const getProductCategory = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/product/category/${id}`);\r\n        const body = await resp.json();\r\n        setCategory(body);\r\n    }\r\n    const [category, setCategory] = useState([]);\r\n    const [categories, setCategories] = useState();\r\n\r\n    let productsFront = category.map(item => {\r\n        return {\r\n            ...item,\r\n            productId: item._id\r\n        };\r\n    });\r\n    useEffect(() => {\r\n        getProductCategory();\r\n    }, []);\r\n\r\n    const buy = async (product) => {\r\n        Swal.fire({\r\n            position: 'center',\r\n            icon: 'success',\r\n            title: 'Purchased product',\r\n            showConfirmButton: false,\r\n            timer: 1500\r\n        });\r\n        console.log(product);\r\n        const resp = await fetch(`http://localhost:4000/api/client/${uid}/products`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(product),\r\n        });\r\n        const data = await resp.json();\r\n        getProductCategory();\r\n    }\r\n\r\n    const getCategories = async () => {\r\n        const resp = await fetch(`http://localhost:4000/api/category/${id}`);\r\n        const body = await resp.json();\r\n        setCategories(body);\r\n    }\r\n\r\n    const getState = (state) => {\r\n        if (state) {\r\n            return (\r\n                <button className=\"btn btn-success btn-block\">\r\n                    Buy\r\n                </button>\r\n            )\r\n        } else {\r\n            return (\r\n                <button className=\"btn btn-secondary btn-block\" disabled>\r\n                    Spent\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container mt-4\">\r\n                {\r\n                    <h1 className=\"display-4 text-blue text-center bg-dark\">{categories && categories.name}</h1>\r\n                }\r\n                <div className=\"row justify-content-md-center\">\r\n                    {\r\n                        productsFront.map((item) => {\r\n                            return (\r\n                                <div key={item.productId} className=\"col-md-3 m-1 text-dark\" >\r\n                                    <div className=\"col home-area m-1\">\r\n                                        <div className=\"card\">\r\n                                            <div className=\"card-body\">\r\n                                                <h4 className=\"card-title\"><kbd>{item.name}</kbd></h4>\r\n                                                <img src={item.urlImg} width=\"400px\" className=\"img-fluid\" />\r\n                                                <hr />\r\n                                                <h6 className=\"card-subtitle mb-2 font-weight-bold text-danger\"><font size=\"4\" color=\"red\">P</font><font size=\"3\"></font><font size=\"4\">rice: </font><mark>$ {item.price}</mark></h6>\r\n                                                <p className=\"card-subtitle mb-2\"><font size=\"3\" color=\"Navy\">Description:</font> {item.description}</p>\r\n                                                <h6 className=\"card-text\" ><strong>Category: </strong><em>{item.category}</em></h6>\r\n                                                <Link to={`/BuyScreen/${item.productId}`} className=\"btn btn-link btn-block\">More Info</Link>\r\n                                                <div onClick={() => buy(item)}>{getState(item.spent)}</div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\userInterface\\Sidebar.js",[],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\NewProduct.js",["178"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\AdminCategoryScreen.js",["179"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\adminCategory\\FormProduct.js",["180","181","182"],"C:\\Users\\Jelsyn Ceron\\Desktop\\React_Desarrollo\\metro-workshop\\FrontEnd\\src\\components\\articles\\services.js",[],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":15,"column":8,"nodeType":"189","endLine":15,"endColumn":10,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":40,"column":36,"nodeType":"193","messageId":"194","endLine":40,"endColumn":38},{"ruleId":"195","severity":1,"message":"196","line":20,"column":44,"nodeType":"197","messageId":"198","endLine":20,"endColumn":47},{"ruleId":"187","severity":1,"message":"199","line":22,"column":8,"nodeType":"189","endLine":22,"endColumn":10,"suggestions":"200"},{"ruleId":"195","severity":1,"message":"201","line":24,"column":12,"nodeType":"197","messageId":"198","endLine":24,"endColumn":16},{"ruleId":"195","severity":1,"message":"202","line":8,"column":12,"nodeType":"197","messageId":"198","endLine":8,"endColumn":22},{"ruleId":"195","severity":1,"message":"203","line":29,"column":15,"nodeType":"197","messageId":"198","endLine":29,"endColumn":19},{"ruleId":"204","severity":1,"message":"205","line":79,"column":49,"nodeType":"206","endLine":79,"endColumn":110},{"ruleId":"195","severity":1,"message":"207","line":19,"column":11,"nodeType":"197","messageId":"198","endLine":19,"endColumn":14},{"ruleId":"187","severity":1,"message":"208","line":23,"column":8,"nodeType":"189","endLine":23,"endColumn":21,"suggestions":"209"},{"ruleId":"187","severity":1,"message":"210","line":23,"column":9,"nodeType":"193","endLine":23,"endColumn":20},{"ruleId":"195","severity":1,"message":"203","line":40,"column":15,"nodeType":"197","messageId":"198","endLine":40,"endColumn":19},{"ruleId":"204","severity":1,"message":"205","line":64,"column":29,"nodeType":"206","endLine":64,"endColumn":71},{"ruleId":"183","replacedBy":"211"},{"ruleId":"185","replacedBy":"212"},{"ruleId":"183","replacedBy":"213"},{"ruleId":"185","replacedBy":"214"},{"ruleId":"195","severity":1,"message":"215","line":2,"column":10,"nodeType":"197","messageId":"198","endLine":2,"endColumn":14},{"ruleId":"195","severity":1,"message":"216","line":19,"column":12,"nodeType":"197","messageId":"198","endLine":19,"endColumn":15},{"ruleId":"187","severity":1,"message":"199","line":17,"column":8,"nodeType":"189","endLine":17,"endColumn":10,"suggestions":"217"},{"ruleId":"195","severity":1,"message":"201","line":48,"column":15,"nodeType":"197","messageId":"198","endLine":48,"endColumn":19},{"ruleId":"187","severity":1,"message":"210","line":27,"column":9,"nodeType":"193","endLine":27,"endColumn":28},{"ruleId":"195","severity":1,"message":"201","line":33,"column":15,"nodeType":"197","messageId":"198","endLine":33,"endColumn":19},{"ruleId":"195","severity":1,"message":"203","line":44,"column":15,"nodeType":"197","messageId":"198","endLine":44,"endColumn":19},{"ruleId":"204","severity":1,"message":"205","line":71,"column":49,"nodeType":"206","endLine":71,"endColumn":110},{"ruleId":"187","severity":1,"message":"218","line":11,"column":8,"nodeType":"189","endLine":11,"endColumn":10,"suggestions":"219"},{"ruleId":"187","severity":1,"message":"220","line":29,"column":8,"nodeType":"189","endLine":29,"endColumn":10,"suggestions":"221"},{"ruleId":"195","severity":1,"message":"203","line":47,"column":15,"nodeType":"197","messageId":"198","endLine":47,"endColumn":19},{"ruleId":"204","severity":1,"message":"205","line":87,"column":49,"nodeType":"206","endLine":87,"endColumn":110},{"ruleId":"195","severity":1,"message":"222","line":27,"column":74,"nodeType":"197","messageId":"198","endLine":27,"endColumn":84},{"ruleId":"187","severity":1,"message":"220","line":8,"column":8,"nodeType":"189","endLine":8,"endColumn":10,"suggestions":"223"},{"ruleId":"187","severity":1,"message":"208","line":10,"column":8,"nodeType":"189","endLine":10,"endColumn":10,"suggestions":"224"},{"ruleId":"195","severity":1,"message":"202","line":35,"column":12,"nodeType":"197","messageId":"198","endLine":35,"endColumn":22},{"ruleId":"225","severity":1,"message":"226","line":58,"column":28,"nodeType":"227","messageId":"228","endLine":58,"endColumn":30},"no-native-reassign",["229"],"no-negated-in-lhs",["230"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["231"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'uid' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getClient'. Either include it or remove the dependency array.",["232"],"'body' is assigned a value but never used.","'categories' is assigned a value but never used.","'data' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'_id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getProduct'. Either include it or remove the dependency array.",["233"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",["229"],["230"],["229"],["230"],"'Link' is defined but never used.","'buy' is assigned a value but never used.",["234"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["235"],"React Hook useEffect has a missing dependency: 'getProductCategory'. Either include it or remove the dependency array.",["236"],"'categoryId' is assigned a value but never used.",["237"],["238"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"241","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"248","fix":"250"},{"desc":"243","fix":"251"},"Update the dependencies array to be: [user]",{"range":"252","text":"253"},"Update the dependencies array to be: [getClient]",{"range":"254","text":"255"},"Update the dependencies array to be: [getProduct]",{"range":"256","text":"257"},{"range":"258","text":"255"},"Update the dependencies array to be: [getCategories]",{"range":"259","text":"260"},"Update the dependencies array to be: [getProductCategory]",{"range":"261","text":"262"},{"range":"263","text":"262"},{"range":"264","text":"257"},[500,502],"[user]",[725,727],"[getClient]",[722,735],"[getProduct]",[381,383],[338,340],"[getCategories]",[864,866],"[getProductCategory]",[246,248],[293,295]]